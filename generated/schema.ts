// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class AccountBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type AccountBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AccountBalance", id.toString(), this);
    }
  }

  static load(id: string): AccountBalance | null {
    return changetype<AccountBalance | null>(store.get("AccountBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get token(): Bytes {
    let value = this.get("token");
    return value!.toBytes();
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Token must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromBytes(<Bytes>value));
    }
  }

  get compoundCount(): i32 {
    let value = this.get("compoundCount");
    return value!.toI32();
  }

  set compoundCount(value: i32) {
    this.set("compoundCount", Value.fromI32(value));
  }

  get compounded0(): BigInt {
    let value = this.get("compounded0");
    return value!.toBigInt();
  }

  set compounded0(value: BigInt) {
    this.set("compounded0", Value.fromBigInt(value));
  }

  get compounded1(): BigInt {
    let value = this.get("compounded1");
    return value!.toBigInt();
  }

  set compounded1(value: BigInt) {
    this.set("compounded1", Value.fromBigInt(value));
  }
}

export class Compound extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Compound entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Compound must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Compound", id.toString(), this);
    }
  }

  static load(id: string): Compound | null {
    return changetype<Compound | null>(store.get("Compound", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amountAdded0(): BigInt {
    let value = this.get("amountAdded0");
    return value!.toBigInt();
  }

  set amountAdded0(value: BigInt) {
    this.set("amountAdded0", Value.fromBigInt(value));
  }

  get amountAdded1(): BigInt {
    let value = this.get("amountAdded1");
    return value!.toBigInt();
  }

  set amountAdded1(value: BigInt) {
    this.set("amountAdded1", Value.fromBigInt(value));
  }

  get bonus0(): BigInt {
    let value = this.get("bonus0");
    return value!.toBigInt();
  }

  set bonus0(value: BigInt) {
    this.set("bonus0", Value.fromBigInt(value));
  }

  get bonus1(): BigInt {
    let value = this.get("bonus1");
    return value!.toBigInt();
  }

  set bonus1(value: BigInt) {
    this.set("bonus1", Value.fromBigInt(value));
  }

  get token0(): Bytes {
    let value = this.get("token0");
    return value!.toBytes();
  }

  set token0(value: Bytes) {
    this.set("token0", Value.fromBytes(value));
  }

  get token1(): Bytes {
    let value = this.get("token1");
    return value!.toBytes();
  }

  set token1(value: Bytes) {
    this.set("token1", Value.fromBytes(value));
  }
}
